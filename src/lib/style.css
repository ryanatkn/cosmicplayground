:root {
	--ocean_hue: 214;
	--land_hue: 124;
	--space_hue: 304;
	--photon_hue: 46;
	/* --orange???_hue: 34; */
	/* TODO clean up color consistency between names, color_, bg_, _text_, etc */
	--ocean_color: hsl(var(--ocean_hue), 65%, 30%);
	--land_color: hsl(var(--land_hue), 65%, 30%);
	--space_color: hsl(var(--space_hue), 45%, 30%);
	--photon_color: hsl(var(--photon_hue), 54%, 30%);
	--lava_color: hsl(0 65% 55%);
	--pending_color: var(--ocean_color);
	--success_color: var(--land_color);
	--text_color_dark: hsl(0 0% 60%);
	--ocean_text_color: hsl(var(--ocean_hue), 65%, 50%);
	--photon_text_color: hsl(var(--photon_hue), 65%, 50%);
	--land_text_color: hsl(var(--land_hue), 65%, 50%);
	--space_text_color: hsl(var(--space_hue), 45%, 50%);
	--color_b_5: 220, 60%, 65%; /* TODO probably make this a lighter shade of `--ocean_color` */
	--color_d_5:
		var(--space_hue), 60%, 65%; /*  TODO probably make this a lighter shade of the primary color */
	/* --text_color_dark: hsl(0 0% 2%); */
	--link_color: var(--ocean_text_color);
	/* TODO reuse --ocean_color and --land_color, maybe using the substitution trick */
	--bg_1: rgba(27, 71, 128, 0.3);
	--bg_2: rgba(27, 126, 35, 0.25);
	--bg_3: hsl(var(--space_hue) 50% 55% / 0.3);
	--bg_dark: rgba(0, 0, 0, 0.6);
	--bg_dark_lighter: rgba(0, 0, 0, 0.35);
	--clickable_border_style: double;
	--clickable_border_style_hover: solid;
	--clickable_border_style_active: solid;
	--clickable_border_style_sm: solid; /* too small for double, also `_sm` hover/active styles are not needed */
	--clickable_transform: scale3d(1, 1, 1);
	--clickable_transform_hover: scale3d(1.1, 1.1, 1.1);
	--clickable_transform_focus: scale3d(1.07, 1.07, 1.07);
	--clickable_transform_active: scale3d(1.2, 1.2, 1.2);
	--clickable_transform_sm_hover: scale3d(1.03, 1.03, 1.03);
	--clickable_transform_sm_active: scale3d(1.09, 1.09, 1.09);
	--clickable_transition: transform 0.05s ease-out;
	--clickable_opacity: 0.7;
	--clickable_opacity_hover: 0.85;
	--clickable_opacity_active: 1;
	--fade_transition: opacity 0.5s linear;
	--portal_border: var(--border_width_6) var(--clickable_border_style) var(--border_color_5);
	--portal_border_radius: 7px;
	--dark_border_md: var(--border_width_3) var(--clickable_border_style) var(--bg_dark_lighter);
	--portal_padding: 12px; /* TODO maybe swap for space_xl3 */
	--panel_border: var(--border_width_5) var(--clickable_border_style) var(--border_color_5);
	--border_radius_xl4: 15px;
	--border_radius_xl3: 7px;
	--text_shadow_sm: 1px 1px rgba(0, 0, 0, 0.6);
	--text_shadow_reverse_sm: -1px -1px rgba(0, 0, 0, 0.6);
	--hud_element_size: 72px;
	--earth_wobble: 23.5deg;
	/* TODO dark mode */
	--bg: #000;
	--input_fill: #000;
}

html {
	background-color: #000; /* TODO shouldn't be needed */
	height: 100%;
}

body {
	background-color: #000; /* TODO shouldn't be needed */
	height: 100%;
}

hr {
	background: none;
	/* TODO vars? */
	border-top: var(--dark_border_md);
	border-bottom: var(--portal_border);
	border-left: none;
	border-right: none;
	margin: var(--spacing-5) 0;
}

code {
	background: var(--bg_1);
	padding: 1px 8px;
	text-shadow: var(--text_shadow_sm);
}

label {
	/* TODO maybe upstream */
	justify-content: flex-start;
}

/* TODO this assumes a horizontal layout - maybe make a component from this with a layout prop? */
figure {
	margin: 0;
	padding: 0;
	display: flex;
	align-items: center;
	flex-wrap: wrap;
}
figcaption {
	flex: 1;
	padding-left: var(--spacing-5);
}

h1 {
	font-size: 48px;
	font-weight: 100;
	margin: 0;
}

h2 {
	font-size: 36px;
	font-weight: 300;
}

h3 {
	font-size: 28px;
	font-weight: 300;
}

.grayscale {
	filter: grayscale(1);
}

.buttonish {
	transform: var(--clickable_transform_sm);
	transition: var(--clickable_transition);
	cursor: pointer;
}
.buttonish:hover {
	transform: var(--clickable_transform_sm_hover);
}
.buttonish:active {
	transform: var(--clickable_transform_sm_active);
}

/* TODO remove this when felt-ui has dark mode */
button,
button:hover,
button:active,
button:focus,
button.selected,
button:disabled {
	background: transparent;
	box-shadow: none;
}

/* TODO upstream */
td {
	padding: var(--space_sm);
}
tr:hover {
	background-color: var(--lighten_2);
}
th {
	text-align: left;
	font-weight: 300;
	font-size: var(--font_size_xl);
	padding: var(--space_sm);
}

.idle {
	cursor: none;
}
.idle_fade {
	transition: var(--fade_transition);
}
.idle .idle_fade {
	opacity: 0;
	cursor: none;
}
.idle .idle_fade button {
	/* kind of a hack, but putting `idle_fade` on every button is no good -
	what other elements should be selected as well? */
	cursor: none;
}

.mirror_x {
	transform: scale3d(-1, 1, 1);
}
.mirror_y {
	transform: scale3d(1, -1, 1);
}
.mirror_xy {
	transform: scale3d(1, -1, 1);
}

summary {
	opacity: 0.6;
}
summary:hover {
	opacity: 0.8;
}
summary:active {
	opacity: 1;
}

.fade-in {
	animation: fade-in 1s linear;
}

@keyframes fade-in {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

/* TODO delete after updating fuz */
.clickable {
	transform: var(--clickable_transform, scale3d(1, 1, 1));
	transform-origin: var(--clickable_transform_origin);
	transition-duration: var(--clickable_transition_duration); /* default to instant, chunky/lofi */
}
.clickable:focus {
	transform: var(--clickable_transform_focus, scale3d(1.07, 1.07, 1.07));
}
.clickable:hover {
	transform: var(--clickable_transform_hover, scale3d(1.1, 1.1, 1.1));
}
.clickable:active {
	transform: var(--clickable_transform_active, scale3d(1.2, 1.2, 1.2));
}

.image_button {
	cursor: pointer;
	height: auto;
	transition: var(--clickable_transition);
	transform-origin: center;
	transform: var(--clickable_transform);
	border: none;
	display: inline-block;
}
.image_button:focus {
	transform: var(--clickable_transform_focus);
}
.image_button:hover {
	transform: var(--clickable_transform_hover);
}
.image_button:active {
	transform: var(--clickable_transform_active);
}

@keyframes pulsing {
	0% {
		transform: scale3d(1, 1, 1);
	}
	100% {
		transform: scale3d(1.02, 1.02, 1.02);
	}
}
.pulsing {
	animation: pulsing var(--pulsing_duration, 0.2s) linear infinite alternate;
}

/* offset to avoid visual artifacts on init */
@keyframes rotating {
	from {
		transform: rotate3d(0, 0, 1, 0deg);
	}
	to {
		transform: rotate3d(0, 0, 1, 360deg);
	}
}
